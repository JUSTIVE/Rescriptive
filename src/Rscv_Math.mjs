// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Caml_obj from "@rescript/std/lib/es6/caml_obj.js";
import * as Belt_Array from "@rescript/std/lib/es6/belt_Array.js";

function sum(value) {
  return Belt_Array.reduce(value, 0, (function (a, b) {
                return a + b | 0;
              }));
}

function max(value) {
  return Belt_Array.reduce(value, 0, (function (a, b) {
                if (a > b) {
                  return a;
                } else {
                  return b;
                }
              }));
}

function ma(x, a, b) {
  return Math.imul(x, a) + b | 0;
}

function product(values) {
  return Belt_Array.reduce(values, 1, (function (a, b) {
                return Math.imul(a, b);
              }));
}

function isInRange(value, param) {
  if (Caml_obj.caml_greaterequal(value, param[0])) {
    return Caml_obj.caml_lessequal(value, param[1]);
  } else {
    return false;
  }
}

function digitLength(value) {
  return String(value).length;
}

var Int = {
  sum: sum,
  max: max,
  ma: ma,
  product: product,
  isInRange: isInRange,
  digitLength: digitLength
};

function sum$1(value) {
  return Belt_Array.reduce(value, 0.0, (function (a, b) {
                return a + b;
              }));
}

function max$1(value) {
  return Belt_Array.reduce(value, 0.0, (function (a, b) {
                if (a > b) {
                  return a;
                } else {
                  return b;
                }
              }));
}

function ma$1(x, a, b) {
  return x * a + b;
}

function product$1(values) {
  return Belt_Array.reduce(values, 1.0, (function (a, b) {
                return a * b;
              }));
}

function isInRange$1(value, lowerBound, upperBound) {
  if (Caml_obj.caml_greaterequal(value, lowerBound)) {
    return Caml_obj.caml_lessequal(value, upperBound);
  } else {
    return false;
  }
}

var Float = {
  sum: sum$1,
  max: max$1,
  ma: ma$1,
  product: product$1,
  isInRange: isInRange$1
};

export {
  Int ,
  Float ,
  
}
/* No side effect */
