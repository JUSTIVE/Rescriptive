// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "@rescript/std/lib/es6/curry.js";
import * as Rscv_Math from "./Rscv_Math.mjs";
import * as Belt_Array from "@rescript/std/lib/es6/belt_Array.js";
import * as Rscv_Array from "./Rscv_Array.mjs";
import * as Belt_Option from "@rescript/std/lib/es6/belt_Option.js";
import * as Rscv_Option from "./Rscv_Option.mjs";

function commonParseRuleReducer(parseRuleResults) {
  if (parseRuleResults.every(Belt_Option.isSome)) {
    return Rscv_Option.flatten(Belt_Array.get(parseRuleResults, 0));
  }
  
}

function make(s) {
  return s;
}

function parseRule(rule, value) {
  switch (rule.TAG | 0) {
    case /* Length */0 :
        if (value.length === rule._0) {
          return value;
        } else {
          return ;
        }
    case /* Kind */1 :
        if (Rscv_Array.has(rule._0, value)) {
          return value;
        } else {
          return ;
        }
    case /* StartsWith */2 :
        if (value.startsWith(rule._0)) {
          return value;
        } else {
          return ;
        }
    case /* Contains */3 :
        return ;
    
  }
}

function parse(rules, value) {
  return commonParseRuleReducer(Belt_Array.map(rules, (function (rule) {
                    return parseRule(rule, value);
                  })));
}

var StringConstraint = {
  make: make,
  parseRule: parseRule,
  parse: parse
};

function make$1(s) {
  return s;
}

function parseRule$1(rule, value) {
  if (rule.TAG === /* DigitLength */0) {
    if (Rscv_Math.Int.digitLength(value) === rule._0) {
      return value;
    } else {
      return ;
    }
  } else if (Rscv_Math.Int.isInRange(value, [
          rule._0,
          rule._1
        ])) {
    return value;
  } else {
    return ;
  }
}

function parse$1(rules, value) {
  return commonParseRuleReducer(Belt_Array.map(rules, (function (rule) {
                    return parseRule$1(rule, value);
                  })));
}

var IntConstraint = {
  make: make$1,
  parseRule: parseRule$1,
  parse: parse$1
};

function Make(ParserTarget) {
  var parse = function (parser, value) {
    return Curry._2(ParserTarget.parse, parser, value);
  };
  return {
          parse: parse,
          make: ParserTarget.make
        };
}

var parse$2 = parse;

var $$String = {
  parse: parse$2,
  make: make
};

export {
  commonParseRuleReducer ,
  StringConstraint ,
  IntConstraint ,
  Make ,
  $$String ,
  
}
/* No side effect */
