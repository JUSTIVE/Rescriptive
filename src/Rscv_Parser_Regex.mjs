// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "@rescript/std/lib/es6/curry.js";
import * as Belt_Int from "@rescript/std/lib/es6/belt_Int.js";
import * as Belt_Array from "@rescript/std/lib/es6/belt_Array.js";
import * as Rscv_Array from "./Rscv_Array.mjs";
import * as Belt_Option from "@rescript/std/lib/es6/belt_Option.js";
import * as Caml_option from "@rescript/std/lib/es6/caml_option.js";

function make(s) {
  return s;
}

var RegexGroupParserTargetString = {
  make: make
};

var make$1 = Belt_Int.fromString;

var RegexGroupParserTargetInt = {
  make: make$1
};

function Make(ParserTarget) {
  var make = function (re, groupNumber) {
    return {
            re: re,
            groupNumber: groupNumber
          };
  };
  var parse = function (t, value) {
    return Belt_Option.map(Belt_Option.flatMap(Belt_Option.flatMap(Belt_Option.map(Belt_Option.map(Caml_option.null_to_opt(t.re.exec(value)), (function (prim) {
                                  return prim;
                                })), (function (param) {
                              return param.map(function (prim) {
                                          if (prim == null) {
                                            return ;
                                          } else {
                                            return Caml_option.some(prim);
                                          }
                                        });
                            })), Rscv_Array.everyO), (function (x) {
                      return Rscv_Array.take(x, t.groupNumber);
                    })), (function (x) {
                  return Belt_Array.map(x, (function (x) {
                                return Curry._1(ParserTarget.make, x);
                              }));
                }));
  };
  return {
          make: make,
          parse: parse
        };
}

function make$2(re, groupNumber) {
  return {
          re: re,
          groupNumber: groupNumber
        };
}

function parse(t, value) {
  return Belt_Option.map(Belt_Option.flatMap(Belt_Option.flatMap(Belt_Option.map(Belt_Option.map(Caml_option.null_to_opt(t.re.exec(value)), (function (prim) {
                                return prim;
                              })), (function (param) {
                            return param.map(function (prim) {
                                        if (prim == null) {
                                          return ;
                                        } else {
                                          return Caml_option.some(prim);
                                        }
                                      });
                          })), Rscv_Array.everyO), (function (x) {
                    return Rscv_Array.take(x, t.groupNumber);
                  })), (function (x) {
                return Belt_Array.map(x, (function (x) {
                              return x;
                            }));
              }));
}

var $$String = {
  make: make$2,
  parse: parse
};

function make$3(re, groupNumber) {
  return {
          re: re,
          groupNumber: groupNumber
        };
}

function parse$1(t, value) {
  return Belt_Option.map(Belt_Option.flatMap(Belt_Option.flatMap(Belt_Option.map(Belt_Option.map(Caml_option.null_to_opt(t.re.exec(value)), (function (prim) {
                                return prim;
                              })), (function (param) {
                            return param.map(function (prim) {
                                        if (prim == null) {
                                          return ;
                                        } else {
                                          return Caml_option.some(prim);
                                        }
                                      });
                          })), Rscv_Array.everyO), (function (x) {
                    return Rscv_Array.take(x, t.groupNumber);
                  })), (function (x) {
                return Belt_Array.map(x, Belt_Int.fromString);
              }));
}

var Int = {
  make: make$3,
  parse: parse$1
};

console.log(parse({
          re: /([a-z]+)(\d+)/,
          groupNumber: [
            1,
            2
          ]
        }, "abc123"));

export {
  RegexGroupParserTargetString ,
  RegexGroupParserTargetInt ,
  Make ,
  $$String ,
  Int ,
  
}
/*  Not a pure module */
